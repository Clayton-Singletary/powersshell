input > "Text `"Quotation marks`"" OR 'Text "Quotation marks"
output > Text "Quotation marks"

`n = newline

"{0:d5}" -f 1234
> 01234
"{0:n3}" -f 123.45678
> 123.457

'server1' -replace '[,]', '[;]' **replaces comas with simicollons**

$profile -split '\.' **splits on periods**
-csplit **casesensitive**
"cat", "dog" -join
> catdog

----------------------------------------------------------------------------------------------------------------

Functions:

function test-it {
    'Hello World!'
}

function add-twonum {
    param ([int]$a, [int]$b)
    $a + $b
}

function test-me{
    param(
        [parameter(mandatory=$true)]
        $var
        )
        "your name is $var"
}

function convert-todollars {
    param(
        [parameter(mandatory, HelpMessage='Enter number of Euros.')]
        [double]
        $euro
    )
    $Dollar = $euro * 1.4
    Write-host "`$$Dollar U.S. Dollars"
}

# **comments**
<# **multi-line comment** #>

------------------------------------------------------------------------------------------------------------------

regex exercise:

function net-info {
    $ipcon = ((ipconfig | findstr [0-9].\.)[0]).Split()[-1]
    $maskcon = ((ipconfig | findstr [0-9].\.)[1]).Split()[-1]
    $gatecon = ((ipconfig | findstr [0-9].\.)[2]).Split()[-1]

    Write-Host "IP: $ipcon"
    Write-Host "Subnet: $maskcon"
    Write-Host "Gateway: $gatecon"
 }
     
-----------------------------------------------------------------------------------------------------------------

Other Exercises:

function net-info {
    $ipcon = ((ipconfig | findstr [0-9].\.)[0]).Split()[-1]
    $maskcon = ((ipconfig | findstr [0-9].\.)[1]).Split()[-1]
    $gatecon = ((ipconfig | findstr [0-9].\.)[2]).Split()[-1]

    Write-Host "IP: $ipcon"
    Write-Host "Subnet: $maskcon"
    Write-Host "Gateway: $gatecon"
}
#-------------------------------------------------------------

function Get-OrdinalDate {
    Get-Date -UFormat "%Y-%j"
}

function Get-SquareNum {
    param(
        [parameter(mandatory = $true)]
        [int]$num
        )
    $num * $num
}

function Get-Product {
    param(
        [parameter(mandatory = $true)]
        [int]$num1,
        [parameter(mandatory = $true)]
        [int]$num2,
        [parameter(mandatory = $true)]
        [int]$num3
    )
    $num1 * $num2 * $num3
}

#-------------------------------------------------------------

function pythag {
    param(
        [parameter(mandatory = $true)]
        [int]$a,
        [parameter(mandatory = $true)]
        [int]$b
    )
    $c = ($a*$a + $b*$b)
    [math]::sqrt($c)
}

function tri-angles {
    param(
        [parameter(mandatory = $true)]
        [int]$a,
        [parameter(mandatory = $true)]
        [int]$b
    )
    $c = 180 - ($a + $b)
    $c
}

function human {
    param(
        [parameter(mandatory = $true)]
        [string]$First,
        [parameter(mandatory = $true)]
        [string]$Last,
        [parameter(mandatory = $true)]
        [int]$Age,
        [parameter(mandatory = $true)]
        [int]$Weight
    )
    $Weight = $Weight / 2.2

    $humint = [ordered]@{
        First = $first;
        Last = $last;
        Age = $age;
        Weight_kg = $Weight
    }
    $humint
}
